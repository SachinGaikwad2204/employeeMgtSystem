package com.employee.serviceImpl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.employee.model.Employee;
import com.employee.repository.EmployeeRepository;
import com.employee.service.EmployeeService;

import java.util.List;
import java.util.Optional;

@Service
public class EmployeeServiceImpl implements EmployeeService {

    @Autowired
    private EmployeeRepository employeeRepository;

    @Override
    public List<Employee> getAllEmployees() {
        return employeeRepository.findAll();
    }

    @Override
    public Employee getEmployeeById(Long id) {
        return employeeRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Employee not found with ID: " + id));
    }

    @Override
    public Employee createEmployee(Employee employee) {
        return employeeRepository.save(employee);
    }

    @Override
    public Employee updateEmployee(Long id, Employee updatedEmployee) {
        Employee existing = employeeRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Employee not found with ID: " + id));

        existing.setFullName(updatedEmployee.getFullName());
        existing.setEmail(updatedEmployee.getEmail());
        existing.setPhone(updatedEmployee.getPhone());
        existing.setGender(updatedEmployee.getGender());
        existing.setDateOfBirth(updatedEmployee.getDateOfBirth());
        existing.setDepartment(updatedEmployee.getDepartment());
        existing.setJobTitle(updatedEmployee.getJobTitle());
        existing.setDateOfJoining(updatedEmployee.getDateOfJoining());
        existing.setSalary(updatedEmployee.getSalary());
        existing.setEmploymentType(updatedEmployee.getEmploymentType());
        existing.setAddressLine1(updatedEmployee.getAddressLine1());
        existing.setAddressLine2(updatedEmployee.getAddressLine2());
        existing.setCity(updatedEmployee.getCity());
        existing.setState(updatedEmployee.getState());
        existing.setZipCode(updatedEmployee.getZipCode());
        existing.setPanNumber(updatedEmployee.getPanNumber());
        existing.setAadhaarNumber(updatedEmployee.getAadhaarNumber());
        existing.setProfilePhotoPath(updatedEmployee.getProfilePhotoPath());
        existing.setResumePath(updatedEmployee.getResumePath());

        return employeeRepository.save(existing);
    }

    @Override
    public void deleteEmployee(Long id) {
        employeeRepository.deleteById(id);
    }
}
